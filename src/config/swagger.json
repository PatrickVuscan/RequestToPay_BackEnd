{
  "swagger": "2.0",
  "info": {
    "title": "RequestToPay",
    "description": "This API is meant to be a proof of concept for Scotia Bank's potential data rich payment on delivery system. Note that using https on locally hosted server will fail and the opposite on a heroku instance.",
    "license": {
      "name": "MIT",
      "url": "https://github.com/PatrickVuscan/RequestToPay_BackEnd/blob/master/LICENSE.md"
    },
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "schemes": ["http", "https"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "Entity Endpoints",
      "description": "This is where to get information about entities from the database."
    },
    {
      "name": "Invoice Endpoints",
      "description": "This is where to get information about invoices from the database."
    },
    {
      "name": "Order Endpoints",
      "description": "This is where to get information about orders from the database."
    },
    {
      "name": "Item Endpoints",
      "description": "This is where to get information about items from the database."
    },
    {
      "name": "InvoiceItems Endpoints",
      "description": "This is where to get information about invoice items from the database."
    }
  ],
  "paths": {
    "/login": {
      "get": {
        "tags": ["Entity Endpoints"],
        "summary": "Returns entity information if user exists in database with given password.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "Specifies the username",
            "required": true,
            "type": "string"
          },
          {
            "name": "pass",
            "in": "query",
            "description": "Specifies the password",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/entity": {
      "put": {
        "tags": ["Entity Endpoints"],
        "summary": "Inserts a new entity into the database.",
        "responses": {
          "200": {
            "description": "This is the EntityID of the newly created entity."
          }
        },
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the Entity to display.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Username",
            "in": "query",
            "description": "The username of entity, for logging in.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "The password of entity, for logging in.",
            "required": true,
            "type": "string"
          },
          {
            "name": "BillingAddress",
            "in": "query",
            "description": "The billing address of the entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PhoneNumber",
            "in": "query",
            "description": "Phone number to send notifications to.",
            "required": false,
            "type": "string"
          }
        ]
      },
      "get": {
        "tags": ["Entity Endpoints"],
        "summary": "Returns entity information if EntityID exists in database.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "parameters": [
          {
            "name": "EID",
            "in": "query",
            "description": "Specifies the EntityID",
            "required": false,
            "type": "integer"
          },{
            "name": "regex",
            "in": "query",
            "description": "Specifies the regex to match the name to. [A-z]* will get all users",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/invoice": {
      "get":  {
        "tags": ["Invoice Endpoints"],
        "summary": "Returns an invoice with the matching InID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No invoices found"
          },
          "400": {
            "description": "Bad request or multiple invoices found"
          }
        },
        "parameters": [
          {
            "name": "InID",
            "in": "query",
            "description": "Specifies the invoice ID",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": ["Invoice Endpoints"],
        "summary": "Inserts a new invoice into the database.",
        "responses": {
          "200": {
            "description": "This is the ID of the newly created invoice."
          }
        },
        "parameters": [
          {
            "name": "DeliveryDate",
            "in": "query",
            "description": "The date the order is to be delivered on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NextInID",
            "in": "query",
            "description": "The ID of the invoice that this invoice replaces/updates.",
            "required": false,
            "type": "integer"
          }
        ]
      }
    },
    "/entityInvoices": {
      "get":  {
        "tags": ["Invoice Endpoints"],
        "summary": "Returns all invoices with the matching Entity ID.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No invoices found"
          }
        },
        "parameters": [
          {
            "name": "EID",
            "in": "query",
            "description": "Specifies the Entity ID",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/item": {
      "get":  {
        "tags": ["Item Endpoints"],
        "summary": "Returns an item with the matching ItemID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No invoices found"
          },
          "400": {
            "description": "Bad request or multiple items found"
          }
        },
        "parameters": [
          {
            "name": "IID",
            "in": "query",
            "description": "Specifies the item ID",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": ["Item Endpoints"],
        "summary": "Inserts a new item into the database.",
        "responses": {
          "200": {
            "description": "This is the ID of the newly created item."
          }
        },
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SID",
            "in": "query",
            "description": "The ID of the seller entity.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Price",
            "in": "query",
            "description": "The price of the item.",
            "required": true,
            "type": "number"
          }
        ]
      }
    },
    "/itemsByName": {
      "get":  {
        "tags": ["Item Endpoints"],
        "summary": "Returns the items with the matching name.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No items found"
          }
        },
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Specifies the item Name",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/invoiceItems": {
      "get":  {
        "tags": ["InvoiceItems Endpoints"],
        "summary": "Returns all InvoiceItems with the matching InvoiceID.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No invoices found"
          }
        },
        "parameters": [
          {
            "name": "InID",
            "in": "query",
            "description": "Specifies the InvoiceID",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": ["InvoiceItems Endpoints"],
        "summary": "Inserts a new invoiceItems row into the database.",
        "responses": {
          "200": {
            "description": "This is the newly created invoiceItems."
          }
        },
        "parameters": [
          {
            "name": "InID",
            "in": "query",
            "description": "The ID of the invoice this is for.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "IID",
            "in": "query",
            "description": "The ID of the item.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Quantity",
            "in": "query",
            "description": "The quantity of the item.",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/order": {
      "get":  {
        "tags": ["Order Endpoints"],
        "summary": "Returns an order with the matching OrderID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No orders found"
          },
          "400": {
            "description": "Bad request or multiple orders found"
          }
        },
        "parameters": [
          {
            "name": "OID",
            "in": "query",
            "description": "Specifies the Order ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FullOrder",
            "in": "query",
            "description": "Specifies if the full order details should be returned.",
            "required": false,
            "type": "boolean"
          }
        ]
      },
      "put": {
        "tags": ["Order Endpoints"],
        "summary": "Inserts a new order into the database.",
        "responses": {
          "200": {
            "description": "This is the ID of the newly created order."
          }
        },
        "parameters": [
          {
            "name": "SID",
            "in": "query",
            "description": "The ID of the seller.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "CID",
            "in": "query",
            "description": "The ID of the customer.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DID",
            "in": "query",
            "description": "The ID of the driver.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "OrderDate",
            "in": "query",
            "description": "The date the order was placed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DeliveryDate",
            "in": "query",
            "description": "The date for the new order to be delivered on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The items ordered, with their respective IDs and Quantities.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "invoiceItems": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "IID": {
                        "type": "integer"
                      },
                      "Quantity": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/orders": {
      "get":  {
        "tags": ["Order Endpoints"],
        "summary": "Returns all orders with the matching Entity ID.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No orders found"
          }
        },
        "parameters": [
          {
            "name": "EID",
            "in": "query",
            "description": "Specifies the Entity ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FullOrder",
            "in": "query",
            "description": "Specifies if the full order details should be returned.",
            "required": false,
            "type": "boolean"
          }
        ]
      }
    },
    "/ordersByPersona": {
      "get":  {
        "tags": ["Order Endpoints"],
        "summary": "Returns all orders with the matching Entity ID and where that Entity is acting as the specified Persona, with the Invoice and Entity columns mixed in.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No orders found"
          }
        },
        "parameters": [
          {
            "name": "EID",
            "in": "query",
            "description": "Specifies the Entity ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Persona",
            "in": "query",
            "description": "Specifies the Persona the Entity is acting as in the order. For Customer, you can use Customer, customer, c as accepted strings. For Seller, you can use Seller, seller, s, as accepted strings. For Driver, you can use Driver, driver, d as accepted strings.",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orderStatus": {
      "put": {
        "tags": ["Order Endpoints"],
        "summary": "Updates the given status of an order with the given state.",
        "responses": {
          "200": {
            "description": "This is the updated order."
          }
        },
        "parameters": [
          {
            "name": "OID",
            "in": "query",
            "description": "The ID of the order to update.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status to update. For ArrivedStatus, you can use ArrivedStatus, Arrived, a as accepted strings. For DeliveredStatus, you can use DeliveredStatus, Delivered, d, as accepted strings. For PaidStatus, you can use PaidStatus, Paid, p as accepted strings. For ApprovedStatus you can use ApprovedStatus, Approved, or ap.",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "The status state to update to.",
            "required": true,
            "type": "boolean"
          }
        ]
      }
    }
  }
}
